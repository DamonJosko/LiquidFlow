// <auto-generated />
using System;
using LiquidFlowLogin.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LiquidFlowLogin.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20181211123126_db1")]
    partial class db1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LiquidFlowLogin.Models.Address", b =>
                {
                    b.Property<int>("AddressID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityID");

                    b.Property<int>("CountryID");

                    b.Property<int>("CountyStateID");

                    b.Property<int>("HouseNumber");

                    b.Property<int>("StreetNameID");

                    b.Property<int>("ZIPID");

                    b.HasKey("AddressID");

                    b.HasIndex("CityID");

                    b.HasIndex("CountryID");

                    b.HasIndex("CountyStateID");

                    b.HasIndex("StreetNameID");

                    b.HasIndex("ZIPID");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("LiquidFlowLogin.Models.City", b =>
                {
                    b.Property<int>("CityID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityName");

                    b.HasKey("CityID");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("LiquidFlowLogin.Models.Company", b =>
                {
                    b.Property<int>("CompanyID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyName");

                    b.HasKey("CompanyID");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("LiquidFlowLogin.Models.CompanyAddress", b =>
                {
                    b.Property<int>("CompanyID");

                    b.Property<int>("AddressID");

                    b.HasKey("CompanyID", "AddressID");

                    b.HasIndex("AddressID");

                    b.ToTable("CompanyAddresses");
                });

            modelBuilder.Entity("LiquidFlowLogin.Models.Country", b =>
                {
                    b.Property<int>("CountryID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountyName");

                    b.HasKey("CountryID");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("LiquidFlowLogin.Models.CountyState", b =>
                {
                    b.Property<int>("CountyStateID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountyName");

                    b.HasKey("CountyStateID");

                    b.ToTable("CountyStates");
                });

            modelBuilder.Entity("LiquidFlowLogin.Models.DeliveryVehicle", b =>
                {
                    b.Property<int>("DeliveryVehicleID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("StatusID");

                    b.Property<string>("VehicleRegistration");

                    b.HasKey("DeliveryVehicleID");

                    b.HasIndex("StatusID");

                    b.ToTable("DeliveryVehicles");
                });

            modelBuilder.Entity("LiquidFlowLogin.Models.FirstName", b =>
                {
                    b.Property<int>("FirstNameID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FName");

                    b.HasKey("FirstNameID");

                    b.ToTable("FirstNames");
                });

            modelBuilder.Entity("LiquidFlowLogin.Models.FuelType", b =>
                {
                    b.Property<int>("FuelTypeID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FuelTypeName");

                    b.HasKey("FuelTypeID");

                    b.ToTable("FuelTypes");
                });

            modelBuilder.Entity("LiquidFlowLogin.Models.LastName", b =>
                {
                    b.Property<int>("LastNameID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LName");

                    b.HasKey("LastNameID");

                    b.ToTable("LastNames");
                });

            modelBuilder.Entity("LiquidFlowLogin.Models.Mixture", b =>
                {
                    b.Property<int>("MixtureID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MixtureRatio");

                    b.HasKey("MixtureID");

                    b.ToTable("Mixtures");
                });

            modelBuilder.Entity("LiquidFlowLogin.Models.Order", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DeliveryVehicleID");

                    b.Property<DateTime>("OrderDate");

                    b.Property<decimal>("TotalOrderCost");

                    b.HasKey("OrderID");

                    b.HasIndex("DeliveryVehicleID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("LiquidFlowLogin.Models.OrderRocketPropellant", b =>
                {
                    b.Property<int>("OrderID");

                    b.Property<int>("RocketPropellantID");

                    b.Property<decimal>("OrderRocketPropellantAmount");

                    b.Property<decimal>("OrderRocketPropellantCost");

                    b.HasKey("OrderID", "RocketPropellantID");

                    b.HasIndex("RocketPropellantID");

                    b.ToTable("OrderRocketPropellants");
                });

            modelBuilder.Entity("LiquidFlowLogin.Models.Rocket", b =>
                {
                    b.Property<int>("RocketID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyID");

                    b.Property<decimal>("PropellantCurrentCapacity");

                    b.Property<decimal>("PropellantMaxCapacity");

                    b.Property<string>("RocketModel");

                    b.Property<int>("RocketNameID");

                    b.Property<int>("RocketPropellantID");

                    b.HasKey("RocketID");

                    b.HasIndex("CompanyID");

                    b.HasIndex("RocketNameID");

                    b.HasIndex("RocketPropellantID");

                    b.ToTable("Rockets");
                });

            modelBuilder.Entity("LiquidFlowLogin.Models.RocketFuel", b =>
                {
                    b.Property<int>("RocketFuelID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("BuyCost");

                    b.Property<decimal>("FuelAmount");

                    b.Property<string>("FuelName");

                    b.Property<decimal>("FuelPrice");

                    b.Property<int>("FuelTypeID");

                    b.HasKey("RocketFuelID");

                    b.HasIndex("FuelTypeID");

                    b.ToTable("RocketFuels");
                });

            modelBuilder.Entity("LiquidFlowLogin.Models.RocketName", b =>
                {
                    b.Property<int>("RocketNameID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RName");

                    b.HasKey("RocketNameID");

                    b.ToTable("RocketNames");
                });

            modelBuilder.Entity("LiquidFlowLogin.Models.RocketOxidizer", b =>
                {
                    b.Property<int>("RocketOxidizerID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("BuyCost");

                    b.Property<decimal>("OxidizerAmount");

                    b.Property<string>("OxidizerName");

                    b.Property<decimal>("OxidizerPrice");

                    b.HasKey("RocketOxidizerID");

                    b.ToTable("RocketOxidizers");
                });

            modelBuilder.Entity("LiquidFlowLogin.Models.RocketPropellant", b =>
                {
                    b.Property<int>("RocketPropellantID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MixtureID");

                    b.Property<int>("RocketFuelID");

                    b.Property<int>("RocketOxidizerID");

                    b.Property<int>("SafetyRecordID");

                    b.Property<int>("SupplierNameID");

                    b.HasKey("RocketPropellantID");

                    b.HasIndex("MixtureID");

                    b.HasIndex("RocketFuelID");

                    b.HasIndex("RocketOxidizerID");

                    b.HasIndex("SafetyRecordID");

                    b.HasIndex("SupplierNameID");

                    b.ToTable("RocketPropellants");
                });

            modelBuilder.Entity("LiquidFlowLogin.Models.SafetyRecord", b =>
                {
                    b.Property<int>("SafetyRecordID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SafetyRecordDetail");

                    b.HasKey("SafetyRecordID");

                    b.ToTable("SafetyRecords");
                });

            modelBuilder.Entity("LiquidFlowLogin.Models.Staff", b =>
                {
                    b.Property<int>("StaffID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FirstNameID");

                    b.Property<int>("LastNameID");

                    b.HasKey("StaffID");

                    b.HasIndex("FirstNameID");

                    b.HasIndex("LastNameID");

                    b.ToTable("StaffMemebers");
                });

            modelBuilder.Entity("LiquidFlowLogin.Models.StaffAddress", b =>
                {
                    b.Property<int>("StaffID");

                    b.Property<int>("AddressID");

                    b.HasKey("StaffID", "AddressID");

                    b.HasIndex("AddressID");

                    b.ToTable("StaffAddresses");
                });

            modelBuilder.Entity("LiquidFlowLogin.Models.Status", b =>
                {
                    b.Property<int>("StatusID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StatusType");

                    b.HasKey("StatusID");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("LiquidFlowLogin.Models.StreetName", b =>
                {
                    b.Property<int>("StreetNameID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StrName");

                    b.HasKey("StreetNameID");

                    b.ToTable("StreetNames");
                });

            modelBuilder.Entity("LiquidFlowLogin.Models.SupplierName", b =>
                {
                    b.Property<int>("SupplierNameID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SupName");

                    b.HasKey("SupplierNameID");

                    b.ToTable("SupplierNames");
                });

            modelBuilder.Entity("LiquidFlowLogin.Models.ZIP", b =>
                {
                    b.Property<int>("ZIPID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ZIPCode");

                    b.HasKey("ZIPID");

                    b.ToTable("ZIPs");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("LiquidFlowLogin.Models.Address", b =>
                {
                    b.HasOne("LiquidFlowLogin.Models.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LiquidFlowLogin.Models.Country", "Country")
                        .WithMany("Addresses")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LiquidFlowLogin.Models.CountyState", "CountyState")
                        .WithMany("Addresses")
                        .HasForeignKey("CountyStateID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LiquidFlowLogin.Models.StreetName", "StreetName")
                        .WithMany("Addresses")
                        .HasForeignKey("StreetNameID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LiquidFlowLogin.Models.ZIP", "ZIP")
                        .WithMany("Addresses")
                        .HasForeignKey("ZIPID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LiquidFlowLogin.Models.CompanyAddress", b =>
                {
                    b.HasOne("LiquidFlowLogin.Models.Address", "Address")
                        .WithMany("CompanyAddresses")
                        .HasForeignKey("AddressID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LiquidFlowLogin.Models.Company", "Company")
                        .WithMany("CompanyAddresses")
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LiquidFlowLogin.Models.DeliveryVehicle", b =>
                {
                    b.HasOne("LiquidFlowLogin.Models.Status", "Status")
                        .WithMany("DeliveryVehicles")
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LiquidFlowLogin.Models.Order", b =>
                {
                    b.HasOne("LiquidFlowLogin.Models.DeliveryVehicle", "DeliveryVehicle")
                        .WithMany("Orders")
                        .HasForeignKey("DeliveryVehicleID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LiquidFlowLogin.Models.OrderRocketPropellant", b =>
                {
                    b.HasOne("LiquidFlowLogin.Models.Order", "Order")
                        .WithMany("OrderRocketPropellants")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LiquidFlowLogin.Models.RocketPropellant", "RocketPropellant")
                        .WithMany()
                        .HasForeignKey("RocketPropellantID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LiquidFlowLogin.Models.Rocket", b =>
                {
                    b.HasOne("LiquidFlowLogin.Models.Company", "Company")
                        .WithMany("Rockets")
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LiquidFlowLogin.Models.RocketName", "RocketName")
                        .WithMany("Rockets")
                        .HasForeignKey("RocketNameID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LiquidFlowLogin.Models.RocketPropellant", "RocketPropellant")
                        .WithMany("Rockets")
                        .HasForeignKey("RocketPropellantID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LiquidFlowLogin.Models.RocketFuel", b =>
                {
                    b.HasOne("LiquidFlowLogin.Models.FuelType", "FuelType")
                        .WithMany("RocketFuels")
                        .HasForeignKey("FuelTypeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LiquidFlowLogin.Models.RocketPropellant", b =>
                {
                    b.HasOne("LiquidFlowLogin.Models.Mixture", "Mixture")
                        .WithMany("RocketPropellants")
                        .HasForeignKey("MixtureID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LiquidFlowLogin.Models.RocketFuel", "RocketFuel")
                        .WithMany("RocketPropellants")
                        .HasForeignKey("RocketFuelID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LiquidFlowLogin.Models.RocketOxidizer", "RocketOxidizer")
                        .WithMany("RocketPropellants")
                        .HasForeignKey("RocketOxidizerID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LiquidFlowLogin.Models.SafetyRecord", "SafetyRecord")
                        .WithMany("RocketPropellants")
                        .HasForeignKey("SafetyRecordID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LiquidFlowLogin.Models.SupplierName", "SupplierName")
                        .WithMany("RocketPropellants")
                        .HasForeignKey("SupplierNameID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LiquidFlowLogin.Models.Staff", b =>
                {
                    b.HasOne("LiquidFlowLogin.Models.FirstName", "FirstName")
                        .WithMany("StaffMembers")
                        .HasForeignKey("FirstNameID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LiquidFlowLogin.Models.LastName", "LastName")
                        .WithMany("StaffMembers")
                        .HasForeignKey("LastNameID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LiquidFlowLogin.Models.StaffAddress", b =>
                {
                    b.HasOne("LiquidFlowLogin.Models.Address", "Address")
                        .WithMany("StaffAddresses")
                        .HasForeignKey("AddressID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LiquidFlowLogin.Models.Staff", "Staff")
                        .WithMany("StaffAddresses")
                        .HasForeignKey("StaffID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
